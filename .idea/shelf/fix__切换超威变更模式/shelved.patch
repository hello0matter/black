Index: blackgo_gui/qt__source/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># coding=utf-8\r\nimport ast\r\nimport hashlib\r\nimport json\r\nimport random\r\nimport shutil\r\nimport subprocess\r\nimport sys\r\nimport threading\r\nimport time\r\nimport tkinter.filedialog\r\nfrom tkinter import Tk\r\nfrom urllib import parse\r\n\r\nimport pyautogui\r\nimport qrcode\r\nimport requests\r\nfrom PySide6.QtCore import QSettings\r\nfrom PySide6.QtGui import QGuiApplication\r\nfrom PySide6.QtQml import QQmlApplicationEngine\r\nfrom pyzbar.pyzbar import decode\r\n\r\nimport os\r\nfrom pathlib import Path\r\nfrom typing import Optional, Tuple, Union\r\n\r\nfrom PIL import Image, ImageDraw, ImageFont  # pip install pillow\r\nimport rc_obj\r\n\r\n# dc\tx\tewm\tdcl\tewml tnl\r\n# 全局参数\r\nglobal open1text, open2text, app, codes, open3txt, times, settings, open4text, open5text, tnl, tnl2, thisa, thisb, ab, thisc\r\nthisc = '1'\r\ntnl = 0\r\ntnl2 = 1\r\nthisa = 0\r\nthisb = 0\r\nopen5text = ''\r\nab = []\r\n# 获取图片宽度\r\ndef get_img_width(fname) -> int:\r\n    return Image.open(fname).size[0]\r\n\r\n\r\n# 获取图片高度\r\ndef get_img_height(fname) -> int:\r\n    return Image.open(fname).size[1]\r\n\r\n\r\n# 给图片加文字\r\n# 生成blank_img空白图片，加上文字之后生成新图片或覆盖旧图, 宽度为origin_img原始图片的宽度\r\n\r\nMARGIN_LEFT, MARGIN_TOP = 40, 10\r\nFONT_SIZE = 12\r\nFONT_COLOR = \"black\"\r\n\r\n\r\ndef gen_text_img(\r\n        origin_img: Union[Path, str],\r\n        text: str,\r\n        img_path=None,\r\n        color=FONT_COLOR,\r\n        font_size: int = FONT_SIZE,\r\n        margin_left: int = MARGIN_LEFT,\r\n        margin_top: int = MARGIN_TOP,\r\n        blank_img=None,\r\n        font_path: Optional[str] = None,\r\n        show_img: bool = False,\r\n) -> Union[Path, str]:\r\n    width = get_img_width(origin_img)\r\n    if blank_img is None:\r\n        img_path = Path(origin_img)\r\n        img_path = img_path.with_name(f\"{img_path.stem}-1{img_path.suffix}\")\r\n\r\n        Image.new(\"RGB\", (width, 70), (255, 255, 255)).save(img_path)\r\n        blank_img = Path(img_path)\r\n    elif isinstance(blank_img, str):\r\n        blank_img = Path(blank_img)\r\n\r\n    im = Image.open(blank_img)\r\n    draw = ImageDraw.Draw(im)\r\n    if font_path is None:\r\n        # font_path = r\"C:WindowsFontssimsun.ttc\"\r\n        # font_path = \"/System/Library/Fonts/Supplemental/Songti.ttc\"\r\n        font_path = \"C:\\Windows\\Fonts\\msyhl.ttc\"\r\n    fnt = ImageFont.truetype(font_path, font_size)\r\n    draw.text((margin_left, margin_top), text, fill=color, font=fnt, color=color)\r\n    if img_path is None:\r\n        img_path = Path(origin_img)\r\n        img_path = img_path.with_name(f\"{img_path.stem}-{len(text)}{img_path.suffix}\")\r\n    im.save(img_path)\r\n    if show_img:\r\n        im.show()\r\n    return img_path\r\n\r\n\r\n# 拼接图片，把上面生成的文字图片拼接到原图上面\r\n# 生成一张宽度一致，高度为两张图片之和的空白长图\r\n# 分别打开图片进行粘贴到空白长图里面\r\n\r\ndef join_imgs(text_img, origin_img, new_path=None) -> None:\r\n    w = get_img_width(text_img)\r\n    fh = get_img_height(text_img)\r\n    oh = get_img_height(origin_img)\r\n\r\n    blank_long_img = Image.new(\"RGB\", (w, oh))  # 空白长图\r\n\r\n    # img1 = Image.open(origin_img).resize((w, oh), Image.ANTIALIAS)\r\n    # blank_long_img.paste(img1, (0, oh))\r\n\r\n    # font_img = Image.open(text_img).resize((w, fh), Image.ANTIALIAS)\r\n    # blank_long_img.paste(font_img, (0, 0))\r\n\r\n    # if new_path is None:\r\n    # new_path = origin_img\r\n    # blank_long_img.save(new_path)\r\n\r\n    os.remove(text_img)\r\n    # blank_long_img.show()\r\n\r\n\r\n# 二维码加字\r\ndef deco_image(\r\n        fpath: Union[Path, str],  # 图片路径\r\n        text: str = \"x\",  # 要添加的文字\r\n        new_path: Union[Path, str, None] = None,  # 新图片要保存的路径（默认覆盖原图）\r\n        color: Union[str, Tuple[int, int, int]] = FONT_COLOR,  # 文字颜色\r\n        font_size: int = FONT_SIZE,  # 文字高度\r\n        margin_left: int = MARGIN_LEFT,\r\n        margin_top: int = MARGIN_TOP,\r\n) -> None:\r\n    text_img = gen_text_img(\r\n        fpath,\r\n        text,\r\n        color=color,\r\n        font_size=font_size,\r\n        margin_left=margin_left,\r\n        margin_top=margin_top,\r\n    )\r\n    join_imgs(text_img, fpath, new_path)\r\n\r\n\r\n# 编写bat脚本，删除旧程序，运行新程序\r\ndef WriteRestartCmd(new_name, old_name):\r\n    b = open(\"upgrade.bat\", 'w')\r\n    TempList = \"@echo off\\n\"\r\n    TempList += \"if not exist \" + new_name + \" exit \\n\"  # 判断是否有新版本的程序，没有就退出更新。\r\n    TempList += \"echo 正在更新至最新版本...\\n\"\r\n    TempList += \"timeout /t 3 /nobreak\\n\"  # 等待3秒\r\n    # TempList += 'set base_dir=\"%~dp0\"'\r\n    # TempList += \"echo kill %base_dir%\"\r\n    TempList += \"taskkill /im \" + old_name + \" /f\"\r\n    TempList += \"timeout /t 3 /nobreak\\n\"  # 等待7秒\r\n\r\n    TempList += \"del \" + old_name + \"\\n\"  # 删除旧程序\r\n    TempList += \"rename  \" + new_name + \" \" + old_name + '\\n'  # 复制新版本程序\r\n    TempList += \"echo 更新完成，正在启动...\\n\"\r\n    TempList += \"timeout /t 3 /nobreak\\n\"\r\n    TempList += \"start  \" + old_name + \"\\n\"  # \"start 1.bat\\n\"\r\n    TempList += \"exit\"\r\n    b.write(TempList)\r\n    b.close()\r\n    subprocess.Popen(\"upgrade.bat\")  # 不显示cmd窗口\r\n    # os.system('start upgrade.bat')  # 显示cmd窗口\r\n\r\n\r\n# 文件hash读取\r\ndef hash_file(filename):\r\n    \"\"\"\"此函数返回SHA-256哈希\r\n     传递给它的文件\"\"\"\r\n\r\n    # 创建一个哈希对象\r\n    h = hashlib.sha256()\r\n\r\n    # 打开文件以二进制模式读取\r\n    with open(filename, 'rb') as file:\r\n        # 循环直到文件末尾\r\n        chunk = 0\r\n        while chunk != b'':\r\n            # 一次只读取1024个字节\r\n            chunk = file.read(1024)\r\n            h.update(chunk)\r\n\r\n    # 返回摘要的十六进制表示形式\r\n    return h.hexdigest()\r\n\r\n\r\n# 更新方法\r\ndef updateExe(exe_name=\"main.exe\"):\r\n    global settings\r\n    try:\r\n        bb = settings.value(\"bb\")\r\n        # 获取日期版本配置\r\n        get1 = requests.get(\"http://114.116.246.121/methods.php?method=h\")\r\n\r\n        # 二次获取程序hash判断 如果 不同继续下载\r\n        get2 = requests.get(\"http://114.116.246.121/methods.php?method=i\")\r\n\r\n        # 需要在启动程序的时候判断杀死自己创建的bat，此时为第二次启动\r\n        if os.path.isfile(\"upgrade.bat\"):\r\n            os.remove(\"upgrade.bat\")\r\n\r\n        # 如果确实是要更新版本，启动bat进行更新，此时为第一次启动\r\n        if bb != get1.text or get2.text != hash_file(exe_name):\r\n            get = requests.get(\"http://xxkj.xiangle.space/\" + exe_name + \"?z=\" + str(random.randint(1, 10000000)))\r\n            settings.setValue(\"bb\", get1.text)\r\n            with open(\"newVersion.exe\", 'wb') as f:\r\n                f.write(get.content)\r\n            WriteRestartCmd(\"newVersion.exe\", exe_name)\r\n            sys.exit()\r\n    except:\r\n        # pyautogui.alert(\"更新失败，请联系开发者17680492987\", \"认真\")\r\n        app.exit()\r\n        sys.exit()\r\n\r\n\r\n# 创建二维码\r\ndef create_qr_code(string, filename, text=None):\r\n    \"\"\"\r\n    :param string: 编码字符\r\n    :return:\r\n    \"\"\"\r\n    qr = qrcode.QRCode(\r\n        version=1,  # 二维码格子的矩阵大小 1-40（1：21*21）\r\n        error_correction=qrcode.constants.ERROR_CORRECT_L,  # 二维码错误允许率\r\n        box_size=10,  # 每个小格子包含的像素数量\r\n        border=0,  # 二维码到图片边框的小格子数\r\n    )  # 设置图片格式\r\n\r\n    data = string  # 输入数据\r\n    qr.add_data(data)\r\n    qr.make(fit=True)\r\n    img = qr.make_image(fill_color='#e1e1e1', back_color='#3a3a3c', quality=50)\r\n\r\n    img.save(filename)  # 生成图片\r\n    # if text:\r\n    #     deco_image(filename, text)\r\n    return filename\r\n\r\n\r\n# 创建大的合并二维码\r\ndef create_qr_code(string, filename, text=None):\r\n    \"\"\"\r\n    :param string: 编码字符\r\n    :return:\r\n    \"\"\"\r\n    qr = qrcode.QRCode(\r\n        version=1,  # 二维码格子的矩阵大小 1-40（1：21*21）\r\n        error_correction=qrcode.constants.ERROR_CORRECT_L,  # 二维码错误允许率\r\n        box_size=10,  # 每个小格子包含的像素数量\r\n        border=0,  # 二维码到图片边框的小格子数\r\n    )  # 设置图片格式\r\n\r\n    data = string  # 输入数据\r\n    qr.add_data(data)\r\n    qr.make(fit=True)\r\n    img = qr.make_image(fill_color='#e1e1e1', back_color='#3a3a3c', quality=50)\r\n\r\n    img.save(filename)  # 生成图片\r\n    # if text:\r\n    #     deco_image(filename, text)\r\n    return filename\r\n\r\n# 选择目录\r\ndef chooseFile():\r\n    root = Tk()\r\n    root.withdraw()\r\n    fname = tkinter.filedialog.askdirectory()\r\n    print(fname)\r\n\r\n    if len(fname) != 0:  # 如果有获取到地址，开始解析\r\n        try:\r\n            return fname\r\n        except UnicodeDecodeError:\r\n            pyautogui.alert(\"输入的数字是0\", \"您设置的文件解析编码格式无法解析该文件，请重新设置       \\n\")\r\n        else:\r\n            print('')\r\n\r\n\r\n# 选择txt文件\r\ndef chooseFile2():\r\n    root = Tk()\r\n    root.withdraw()\r\n    fname = tkinter.filedialog.askopenfile()\r\n\r\n    fname = fname.name\r\n    if len(fname) != 0:  # 如果有获取到地址，开始解析\r\n        if fname.find('.txt') < 0:  # 确认是txt文件\r\n            pyautogui.alert(\"提示\", \"请选择txt格式数据文件       \\n\")\r\n\r\n        # 编码异常处理\r\n        try:\r\n            return fname\r\n        except UnicodeDecodeError:\r\n            pyautogui.alert(\"输入的数字是0\")(\"您设置的文件解析编码格式无法解析该文件，请重新设置       \\n\")\r\n        else:\r\n            print('')\r\n\r\n\r\n# 总功能函数\r\ndef querys():\r\n    global open1text, codes, window, times, can, open2text, open4text, open5text, open3text, tnl, tnl2, thisa, thisb, thisc\r\n\r\n    def thismsg(thitxt):\r\n        pyautogui.alert(thitxt, \"提示\")\r\n\r\n    # 主请求函数\r\n    def gunk(token, vin, pwd):\r\n        ip = get_ip()\r\n\r\n        url = 'http://zjfjdc.zjjt365.com:5002/hz_mysql_api/BatteryBinding/hgzinfoquery?token=' + token + '&cjhurl=' + vin\r\n        headers = {'User-Agent': 'okhttp/4.9.1', 'Host': 'zjfjdc.zjjt365.com:5002',\r\n                   'Connection': 'Keep-Alive',\r\n                   'Accept-Encoding': 'gzip', 'Cient_ip': ip, 'X-Forwarded-For': ip,\r\n                   'X-Originating-IP': ip, 'X-Remote-IP': ip, 'X-Remote-Addr': ip}\r\n        # cookies = {'SERVERID': '941743a4a2850041e1e7cef946493742|1664463091|1664463038'}\r\n        cookies = {}\r\n        data = {}\r\n        requests.get(url, headers=headers, verify=False, cookies=cookies)\r\n        time.sleep(float(times))\r\n\r\n        url = 'http://zjfjdc.zjjt365.com:5002/hz_mysql_api/BatteryBinding/dcinfoquery?token=' + token + '&dcbhurl=' + pwd\r\n        headers = {'User-Agent': 'okhttp/4.9.1', 'Host': 'zjfjdc.zjjt365.com:5002',\r\n                   'Connection': 'Keep-Alive',\r\n                   'Accept-Encoding': 'gzip', 'Cient_ip': ip, 'X-Forwarded-For': ip,\r\n                   'X-Originating-IP': ip, 'X-Remote-IP': ip, 'X-Remote-Addr': ip}\r\n        # cookies = {'SERVERID': '941743a4a2850041e1e7cef946493742|1664463317|1664463038'}\r\n        data = {}\r\n        cookies = {}\r\n        refail = requests.get(url, headers=headers, verify=False, cookies=cookies)\r\n        time.sleep(float(times))\r\n\r\n        window.setProperty('inputcars', \" 车:\" + vin + \"码:\" + pwd)\r\n\r\n        url = 'http://zjfjdc.zjjt365.com:5002/hz_mysql_api/BatteryBinding/checkCjhDc?token=' + token + '&city=0571&cjhurl=' + vin + '&dcbhurl=' + pwd\r\n\r\n        headers = {'User-Agent': 'okhttp/4.9.1', 'Host': 'zjfjdc.zjjt365.com:5002',\r\n                   'Connection': 'Keep-Alive',\r\n                   'Accept-Encoding': 'gzip', 'Cient_ip': ip, 'X-Forwarded-For': ip,\r\n                   'X-Originating-IP': ip, 'X-Remote-IP': ip, 'X-Remote-Addr': ip}\r\n        # cookies = {'SERVERID': '941743a4a2850041e1e7cef946493742|1664347635|1664342013'}\r\n        cookies = {}\r\n        html = requests.get(url, headers=headers, verify=False, cookies=cookies)\r\n        time.sleep(float(times))\r\n\r\n        return html, refail\r\n\r\n    try:\r\n        all = open(open2text + \"/所有链接.txt\", 'a+', encoding='utf-8')\r\n        success = open(open2text + \"/成功链接.txt\", 'a+', encoding='utf-8')\r\n        success.writelines(\"dc\\tewm\\tdcl\\tewml\\ttnl\\n\")\r\n        # if open5text or open2text:\r\n        if not os.path.exists(open2text + \"/error/\"):\r\n            os.mkdir(open2text + \"/error/\")\r\n        fail = open(open2text + \"/error/失败链接.txt\", 'a+', encoding='utf-8')\r\n    except:\r\n        thismsg(\"创建文件错误\")\r\n        return\r\n    a = 0\r\n    b = 0\r\n    try:\r\n        if open2text:\r\n            if open5text == '':\r\n                # with open(open4text, 'r', encoding='utf-8') as f:\r\n                #     requests.get(\"http://114.116.246.121/methods.php?method=b&data=\" + f.read())\r\n                dcb = []\r\n                for root, dirs, files in os.walk(open1text+\"/电池背\"):  # 开始遍历文件\r\n                    for f in files:\r\n                        dcb.append(os.path.join(root, f))\r\n                for root, dirs, files in os.walk(open1text):  # 开始遍历文件\r\n                    for f in files:\r\n                        if can != \"2107433662\":\r\n                            raise \"erxsad\"\r\n                        if not times:\r\n                            raise \"erxsad\"\r\n                        file = os.path.join(root, f)\r\n                        lower = os.path.splitext(file)[-1].lower()\r\n\r\n                        if lower not in ['.jpg', '.jpeg', '.png','test.jpg']:\r\n                            continue\r\n                        #\r\n                        if f.find(\" \") != -1 and f.find(\"5merge\") == -1 and f.find(\"四合一\") == -1:\r\n                            split_ = f.split(\" \")[1]\r\n                            thisxh = f.split(\" \")[0]\r\n                            thisa = split_[: split_.find(\".\")].split(\"-\")[0]\r\n                            thisb = split_[: split_.find(\".\")].split(\"-\")[1]\r\n                        else:\r\n                            continue\r\n                        thisa__jpg_ = thisxh + \" \" + thisa + \"-5merge.jpg\"\r\n                        # thisa__jpg_2 = thisxh + \" \" + thisa + \"-四合一.jpg\"\r\n\r\n                        wbj = get_img_width(dcb[0])\r\n                        hbj = get_img_height(dcb[0])\r\n                        if thisb == '1':\r\n\r\n                            w = get_img_width(file)\r\n                            h = get_img_height(file)\r\n                            blank_long_img = Image.new(\"RGB\", (w, h * 3+hbj), (0, 0, 0))  # 空白大图\r\n                            blank_long_img.save(os.path.join(root, thisa__jpg_))\r\n\r\n                            # if thisc == thisb:\r\n                            blank_long_img = Image.open(os.path.join(root, thisa__jpg_))\r\n                            img1 = Image.open(dcb[random.randint(0, len(dcb) - 1)]).resize((w, hbj), Image.ANTIALIAS)\r\n                            blank_long_img.paste(img1, (0, 0))\r\n                            blank_long_img.save(os.path.join(root, os.path.join(root, thisa__jpg_)))\r\n                            # else:\r\n                            #     blank_long_img = Image.open(os.path.join(root, thisa__jpg_))\r\n                            #     img1 = Image.open(file)\r\n                            #     blank_long_img.paste(img1, (0, 0))\r\n                            #     blank_long_img.save(os.path.join(root, thisa__jpg_))\r\n\r\n                            # blank_long_img2 = Image.new(\"RGB\", (w * 2, h * 2), (0, 0, 0))  # 空白大图\r\n                            #\r\n                            # img11 = Image.open(file)\r\n                            # blank_long_img.paste(img11, (0, 0))\r\n                            # blank_long_img.save(os.path.join(root, thisa__jpg_2))\r\n\r\n                        elif thisb == '2':\r\n                            w = get_img_width(file)\r\n                            h = get_img_height(file)\r\n                            # if thisc == thisb:\r\n                            #     blank_long_img = Image.open(os.path.join(root, thisa__jpg_))\r\n                            #     img2 = Image.open(dcb[random.randint(0, len(dcb) - 1)]).resize((w, h), Image.ANTIALIAS)\r\n                            #     blank_long_img.paste(img2, (w, 0))\r\n                            #     blank_long_img.save(os.path.join(root, os.path.join(root, thisa__jpg_)))\r\n                            # else:\r\n                            blank_long_img = Image.open(os.path.join(root, thisa__jpg_))\r\n                            img2 = Image.open(file)\r\n                            blank_long_img.paste(img2, (0, hbj))\r\n                            blank_long_img.save(os.path.join(root, thisa__jpg_))\r\n                            #\r\n                            # blank_long_img2 = Image.open(os.path.join(root, thisa__jpg_2))\r\n                            # img22 = Image.open(file)\r\n                            # blank_long_img2.paste(img22, (w, 0))\r\n                            # blank_long_img2.save(os.path.join(root, thisa__jpg_2))\r\n\r\n                        elif thisb == '3':\r\n                            w = get_img_width(file)\r\n                            h = get_img_height(file)\r\n\r\n                            # if thisc == thisb:\r\n                            #     blank_long_img = Image.open(os.path.join(root, thisa__jpg_))\r\n                            #     img3 = Image.open(dcb[random.randint(0, len(dcb) - 1)]).resize((w, h), Image.ANTIALIAS)\r\n                            #     blank_long_img.paste(img3, (0, h))\r\n                            #     blank_long_img.save(os.path.join(root, os.path.join(root, thisa__jpg_)))\r\n                            # else:\r\n                            blank_long_img = Image.open(os.path.join(root, thisa__jpg_))\r\n                            img3 = Image.open(file)\r\n                            blank_long_img.paste(img3, (0, hbj + h * 1))\r\n                            blank_long_img.save(os.path.join(root, thisa__jpg_))\r\n                            # blank_long_img2 = Image.open(os.path.join(root, thisa__jpg_2))\r\n                            # img32 = Image.open(file)\r\n                            # blank_long_img2.paste(img32, (0, h))\r\n                            # blank_long_img2.save(os.path.join(root, thisa__jpg_2))\r\n                        elif thisb == '4':\r\n                            w = get_img_width(file)\r\n                            h = get_img_height(file)\r\n\r\n                            # if thisc == thisb:\r\n                            #     blank_long_img = Image.open(os.path.join(root, thisa__jpg_))\r\n                            #     img4 = Image.open(dcb[random.randint(0, len(dcb) - 1)]).resize((w, h), Image.ANTIALIAS)\r\n                            #     blank_long_img.paste(img4, (w, h))\r\n                            #     blank_long_img.save(os.path.join(root, os.path.join(root, thisa__jpg_)))\r\n                            # else:\r\n                            blank_long_img = Image.open(os.path.join(root, thisa__jpg_))\r\n                            img4 = Image.open(file)\r\n                            blank_long_img.paste(img4, (0,  hbj + h * 2))\r\n                            blank_long_img.save(os.path.join(root, thisa__jpg_))\r\n                            # thisc = str(random.randint(1, 4))\r\n                            #\r\n                            # blank_long_img2 = Image.open(os.path.join(root, thisa__jpg_2))\r\n                            # img42 = Image.open(file)\r\n                            # blank_long_img2.paste(img42, (w, h))\r\n                            # blank_long_img2.save(os.path.join(root, thisa__jpg_2))\r\n                        # decocdeQR = decode(image)\r\n                        # if len(decocdeQR) > 0:\r\n                        #     # 是二维码\r\n                        #\r\n                        #     qrdata = decocdeQR[0].data.decode('utf-8')\r\n                        #     txt = parse.quote(qrdata, 'utf-8')\r\n                        #     good = open3text[random.randint(0, len(open3text)) - 1]\r\n                        #     good = \"http://www.pzcode.cn/vin/\" + good\r\n                        #     good = parse.quote(good, 'utf-8')\r\n                        #     html, refail = gunk(token__data, good, txt)\r\n                        #     re = json.loads(html.text)\r\n                        #     all.writelines(qrdata + \" 数据：\" + re['msg'] + \" car:\" + good + '\\n')\r\n                        #     all.flush()\r\n                        #     b = b + 1\r\n                        #     split = qrdata[qrdata.rfind(\"/\") + 1:]\r\n                        #     if re['msg'] == \"绑定成功\" or re['code'] == 0:\r\n                        #         a = a + 1\r\n                        #         data_ = qrdata + \" 原文件：\" + f + \" 数据：\" + str(re['msg']) + \" \" + str(\r\n                        #             re['data'] + \" car:\" + good).replace(\"'\", '\"')\r\n                        #         requests.get(\"http://114.116.246.121/methods.php?method=b&data=\" + data_)\r\n                        #         success.writelines(data_ + '\\n')\r\n                        #         success.flush()\r\n                        #         shutil.copy(file, open2text + \"/\" + split + lower)\r\n                        #     else:\r\n                        #         if re['msg'] == \"程序异常请联系管理员\":\r\n                        #             shutil.copy(file, open2text + \"/error/\" + split + lower)\r\n                        #\r\n                        # else:\r\n                        #     continue\r\n            else:\r\n\r\n                with open(open5text, \"r\", encoding='utf-8') as f:\r\n                    open5textl = f.read().splitlines()\r\n                    # with open(\"D:/tmp/zpm/天能/6-DZF-12/1214废弃.txt\", \"r\", encoding='utf-8') as f:\r\n                    #     fq = f.read().splitlines()#废弃排除在外的行数组\r\n                    #     for fql in fq:\r\n                    #       fqls = filterline(fql)\r\n                    #       ab.append(fqls[fqls.rfind(\"/\") + 1:])#追加\r\n                    for breadline in open5textl:\r\n                        breadline = filterline(breadline)\r\n                        if breadline == \"\":\r\n                            continue\r\n                        if can != \"2107433662\":\r\n                            raise \"erxsad\"\r\n                        if not times:\r\n                            raise \"erxsad\"\r\n                        txt = parse.quote(breadline, 'utf-8')\r\n                        good = open3text[random.randint(0, len(open3text)) - 1]\r\n                        good = \"http://www.pzcode.cn/vin/\" + good\r\n                        good = parse.quote(good, 'utf-8')\r\n\r\n                        split = breadline[breadline.rfind(\"/\") + 1:]\r\n                        if split in ab:\r\n                            continue\r\n                        html, refail = gunk(token__data, good, txt)\r\n                        re = json.loads(html.text)\r\n                        refail = json.loads(refail.text)['data']\r\n                        all.writelines(breadline + \" 数据：\" + str(re) + \" car:\" + good + '\\n')\r\n                        all.flush()\r\n                        b = b + 1\r\n                        jpg_2 = open2text + \"/error/\" + ' ' + split + \".png\"\r\n\r\n                        # if not refail:\r\n                        jpg_ = open2text + \"/\" + ' ' + split + \".png\"\r\n                        jpg_split = open2text + \"/\" + split + \".png\"\r\n                        if re['msg'] == \"绑定成功\" or re['code'] == 0:\r\n\r\n                            L = len(split)\r\n\r\n                            vivi = 0\r\n                            finds = False\r\n                            # for v in range(1,L):\r\n                            #     if split[vivi].isalpha():\r\n                            #         if not split in ab:\r\n                            #             vivipos = vivi\r\n                            #             vivi_ = split[vivipos - 1:vivipos]\r\n                            #             if vivi_ == \"-\":\r\n                            #                 vivipos = vivipos - 1\r\n                            #             tnl2 = tnl2 + 1\r\n                            #             for i in ['1','2','3','4']:\r\n                            #                 # if not i == vivi_:\r\n                            #                 split = split[:vivipos - 1] + i + split[vivipos:]\r\n                            #                 tnl = i\r\n                            #                 if not split in ab:\r\n                            #                     a = a + 1\r\n                            #                     ab.append(split)\r\n                            #                     # thiscc = str(random.randint(1, 4))\r\n                            #                     tnl_ = refail['dcpp'] + refail['dcxh']+\" \" + str(tnl2) + \"-\" + str(i)\r\n                            #\r\n                            #                     jpg_ = open2text + \"/\" + (refail['dcpp'] if 'dcpp' in refail else '') + (\r\n                            #                         refail['dcxh'] if 'dcxh' in refail else '') + ' ' + split + \".png\"\r\n                            #                     jpg_split = open2text + \"/\" + tnl_+ \".png\"\r\n                            #                     jpg_2 = open2text + \"/error/\" + (refail['dcpp'] if 'dcpp' in refail else '') + (\r\n                            #                         refail['dcxh'] if 'dcxh' in refail else '') + ' ' + split + \".png\"\r\n                            #\r\n                            #                     data_ = (\"https://www.pzcode.cn/pwb/\" + split).replace(\"'\", '\"')\r\n                            #                     requests.get(\"http://114.116.246.121/methods.php?method=b&data=\" + data_)\r\n                            #\r\n                            #\r\n                            #                     success.writelines(tnl_+ \".png\" + '\\t' + str(\r\n                            #                         jpg_ + '\\t' + split + '\\t' + jpg_split + '\\t' + str(i) + '\\n').replace(\"/\", \"\\\\\"))\r\n                            #                     success.flush()\r\n                            #\r\n                            #\r\n                            #                     if refail and 'dcpp' in refail:\r\n                            #                         create_qr_code(data_, jpg_, refail['dcpp'] + refail['dcxh'] + str(tnl2)+\"-\"+str(i) + \"\\n\" + split)\r\n                            #                         create_qr_code(split, jpg_split, split)\r\n                            #                     else:\r\n                            #                         create_qr_code(data_, jpg_)\r\n                            #                         create_qr_code(split, jpg_split, split)\r\n                            #         finds = True;\r\n                            #         break\r\n                            #     vivi = vivi + 1\r\n                            # 没找到则跳过\r\n                            # if finds == False:\r\n                            a = a + 1\r\n                            ab.append(split)\r\n                            tnl = tnl + 1\r\n                            if tnl == 5:\r\n                                thisc = str(random.randint(1, 4))\r\n                                tnl2 = tnl2 + 1\r\n                                tnl = 1\r\n\r\n                            tnl_ = refail['dcpp'] + refail['dcxh']+\" \" + str(tnl2) + \"-\" + str(tnl)\r\n\r\n                            jpg_ = open2text + \"/\" + (refail['dcpp'] if 'dcpp' in refail else '') + (\r\n                                refail['dcxh'] if 'dcxh' in refail else '') + ' ' + split + \".png\"\r\n                            jpg_split = open2text + \"/\" + tnl_+ \".png\"\r\n                            jpg_2 = open2text + \"/error/\" + (refail['dcpp'] if 'dcpp' in refail else '') + (\r\n                                refail['dcxh'] if 'dcxh' in refail else '') + ' ' + split + \".png\"\r\n\r\n                            data_ = breadline.replace(\"'\", '\"')\r\n                            requests.get(\"http://114.116.246.121/methods.php?method=b&data=\" + data_)\r\n\r\n\r\n                            success.writelines(tnl_+ \".png\" + '\\t' + str(\r\n                                jpg_ + '\\t' + split + '\\t' + jpg_split + '\\t' + str(tnl) + '\\n').replace(\"/\", \"\\\\\"))\r\n                            success.flush()\r\n\r\n\r\n                            if refail and 'dcpp' in refail:\r\n                                create_qr_code(breadline, jpg_, refail['dcpp'] + refail['dcxh'] + str(tnl2)+\"-\"+str(tnl) + \"\\n\" + split)\r\n                                create_qr_code(split, jpg_split, split)\r\n                            else:\r\n                                create_qr_code(breadline, jpg_)\r\n                                create_qr_code(split, jpg_split, split)\r\n                        else:\r\n                            if re['msg'] == \"程序异常请联系管理员\":\r\n                                html, refail = gunk(token__data, good, txt)\r\n                                re = json.loads(html.text)\r\n                                if re['msg'] == \"绑定成功\" or re['code'] == 0:\r\n                                    a = a + 1\r\n                                    ab.append(split)\r\n                                    data_ = (breadline).replace(\"'\", '\"')\r\n                                    requests.get(\"http://114.116.246.121/methods.php?method=b&data=\" + data_)\r\n                                    success.writelines(data_ + '\\t' + str(\r\n                                        jpg_ + '\\t' + split + '\\t' + jpg_split + '\\t' + str(tnl) + '\\n').replace(\"/\",\r\n                                                                                                                 \"\\\\\"))\r\n                                    success.flush()\r\n                                    if refail and 'dcpp' in refail:\r\n                                        create_qr_code(breadline, jpg_, refail['dcpp'] + refail['dcxh'] + str(tnl2)+\"-\"+str(tnl) + \"\\n\" + split)\r\n                                        create_qr_code(split, jpg_split, split)\r\n                                    else:\r\n                                        create_qr_code(breadline, jpg_)\r\n                                        create_qr_code(split, jpg_split, split)\r\n                                else:\r\n                                    if refail and 'dcpp' in refail:\r\n                                        create_qr_code(breadline, jpg_2, refail['dcpp'] + refail['dcxh'] + str(tnl2)+\"-\"+str(tnl) + \"\\n\" + split)\r\n                                        create_qr_code(split, jpg_split, split)\r\n                                    else:\r\n                                        create_qr_code(breadline, jpg_2)\r\n                                        create_qr_code(split, jpg_split, split)\r\n                                    if fail:\r\n                                        fail.writelines(breadline + \" 数据：\" + str(re) + \" car:\" + good + '\\n')\r\n                                        fail.flush()\r\n        else:\r\n            thismsg(\"请选择输出文件夹！\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n    except Exception as e:\r\n        thismsg(\"执行出错！\" + str(e))\r\n        all.close()\r\n        success.close()\r\n        if fail:\r\n            fail.close()\r\n        return\r\n    requests.get(\"http://114.116.246.121/methods.php?method=b&data=\" + \"成功数：\" + str(a) + \"总数:\" + str(b))\r\n    thismsg(\"执行成功！\")\r\n    all.close()\r\n    success.close()\r\n\r\n\r\ndef filterline(line):\r\n    i = len(line.split(\"\\t\"))\r\n    if line.startswith(\"{\"):\r\n        # 爬虫出来的文件读取\r\n        x = ast.literal_eval(line)\r\n        line = \"https://www.pzcode.cn/pwb/\" + x[\"dc\"]\r\n    elif line.find(\" 数据\") != -1:\r\n        # 带\" 数据\"的也可以再次解析:选择输出错误的解析\r\n        line = line[:line.find(\" 数据\")]  # 开始打开txt文件\r\n    elif i == 5 and line.split(\"\\t\")[2] != \"dcl\":\r\n        #简单的二维码\r\n        line = \"https://www.pzcode.cn/pwb/\" + line.split(\"\\t\")[2]\r\n    elif i == 1 and line.find(\" 原文件\") != -1:\r\n        # 老版本数据库读取\r\n        line = line[line.find(\"'\")+1:line.find(\" 原文件\")]\r\n    elif i == 1 and line.find(\"pzcode\") != -1:\r\n        #wps表格码\r\n        return line\r\n    else:\r\n        return \"\"\r\n    if line.find('\"') != -1:\r\n        line = line[line.find('\"') + 1:]\r\n    elif line.find(\"'\") != -1:\r\n        line = line[line.find(\"'\") + 1:]\r\n    return line\r\n\r\n\r\n# 点击登录方法\r\ndef main__login__thread(usercode, password, city):\r\n    global window, settings, token__data\r\n\r\n    try:\r\n        md5s = hashlib.md5()\r\n        md5s.update(password.encode('utf8'))\r\n        hexdigest = md5s.hexdigest()\r\n        url = 'http://zjfjdc.zjjt365.com:5002/hz_mysql_api/BatteryBinding/login?usercode=' + usercode + '&password=' + hexdigest + '&city=' + city\r\n        # headers = {'Host': 'zjfjdc.zjjt365.com:5002', 'Connection': 'Keep-Alive', 'Accept-Encoding': 'gzip'}\r\n        # cookies = {'SERVERID': '941743a4a2850041e1e7cef946493742|1664087759|1664087489'}\r\n        # data = {}\r\n        # url = 'http://zjfjdc.zjjt365.com:5002/hz_mysql_api/BatteryBinding/login?usercode=1&password=c4ca4238a0b923820dcc509a6f75849b&city=0573'\r\n        headers = {'Host': 'zjfjdc.zjjt365.com:5002', 'Connection': 'Keep-Alive', 'Accept-Encoding': 'gzip',\r\n                   'User-Agent': 'okhttp/4.9.1'}\r\n        cookies = {}\r\n        data = {}\r\n\r\n        html = requests.get(url, headers=headers, verify=False, cookies=cookies)\r\n        token__data = json.loads(html.text)['data']\r\n\r\n        if token__data:\r\n            window.setProperty('loginData', token__data)\r\n            settings.setValue(\"loginData\", token__data)\r\n            settings.setValue(\"city\", city)\r\n        else:\r\n            window.setProperty('loginData', token__data)\r\n    except Exception as e:\r\n        print(e)\r\n    window.setProperty('isUpdating', False)\r\n\r\n\r\ndef open1():\r\n    global open1text\r\n    open1text = chooseFile()\r\n\r\n\r\n# 消息框总函数\r\ndef msg(st):\r\n    pyautogui.alert(\"提示\", st)\r\n\r\n\r\n# 中国ip函数\r\ndef get_ip():\r\n    ips = ['58.14.0.0', '58.16.0.0', '58.24.0.0', '58.30.0.0', '58.32.0.0', '58.66.0.0', '58.68.128.0', '58.82.0.0',\r\n           '58.87.64.0', '58.99.128.0', '58.100.0.0', '58.116.0.0', '58.128.0.0', '58.144.0.0', '58.154.0.0',\r\n           '58.192.0.0',\r\n           '58.240.0.0', '59.32.0.0', '59.64.0.0', '59.80.0.0', '59.107.0.0', '59.108.0.0', '59.151.0.0',\r\n           '59.155.0.0',\r\n           '59.172.0.0', '59.191.0.0', '59.191.240.0', '59.192.0.0', '60.0.0.0', '60.55.0.0', '60.63.0.0',\r\n           '60.160.0.0',\r\n           '60.194.0.0', '60.200.0.0', '60.208.0.0', '60.232.0.0', '60.235.0.0', '60.245.128.0', '60.247.0.0',\r\n           '60.252.0.0',\r\n           '60.253.128.0', '60.255.0.0', '61.4.80.0', '61.4.176.0', '61.8.160.0', '61.28.0.0', '61.29.128.0',\r\n           '61.45.128.0',\r\n           '61.47.128.0', '61.48.0.0', '61.87.192.0', '61.128.0.0', '61.232.0.0', '61.236.0.0', '61.240.0.0',\r\n           '114.28.0.0',\r\n           '114.54.0.0', '114.60.0.0', '114.64.0.0', '114.68.0.0', '114.80.0.0', '116.1.0.0', '116.2.0.0',\r\n           '116.4.0.0',\r\n           '116.8.0.0', '116.13.0.0', '116.16.0.0', '116.52.0.0', '116.56.0.0', '116.58.128.0', '116.58.208.0',\r\n           '116.60.0.0',\r\n           '116.66.0.0', '116.69.0.0', '116.70.0.0', '116.76.0.0', '116.89.144.0', '116.90.184.0', '116.95.0.0',\r\n           '116.112.0.0',\r\n           '116.116.0.0', '116.128.0.0', '116.192.0.0', '116.193.16.0', '116.193.32.0', '116.194.0.0',\r\n           '116.196.0.0',\r\n           '116.198.0.0', '116.199.0.0', '116.199.128.0', '116.204.0.0', '116.207.0.0', '116.208.0.0',\r\n           '116.212.160.0',\r\n           '116.213.64.0', '116.213.128.0', '116.214.32.0', '116.214.64.0', '116.214.128.0', '116.215.0.0',\r\n           '116.216.0.0',\r\n           '116.224.0.0', '116.242.0.0', '116.244.0.0', '116.248.0.0', '116.252.0.0', '116.254.128.0',\r\n           '116.255.128.0',\r\n           '117.8.0.0', '117.21.0.0', '117.22.0.0', '117.24.0.0', '117.32.0.0', '117.40.0.0', '117.44.0.0',\r\n           '117.48.0.0',\r\n           '117.53.48.0', '117.53.176.0', '117.57.0.0', '117.58.0.0', '117.59.0.0', '117.60.0.0', '117.64.0.0',\r\n           '117.72.0.0',\r\n           '117.74.64.0', '117.74.128.0', '117.75.0.0', '117.76.0.0', '117.80.0.0', '117.100.0.0', '117.103.16.0',\r\n           '117.103.128.0', '117.106.0.0', '117.112.0.0', '117.120.64.0', '117.120.128.0', '117.121.0.0',\r\n           '117.121.128.0',\r\n           '117.121.192.0', '117.122.128.0', '117.124.0.0', '117.128.0.0', '118.24.0.0', '118.64.0.0', '118.66.0.0',\r\n           '118.67.112.0', '118.72.0.0', '118.80.0.0', '118.84.0.0', '118.88.32.0', '118.88.64.0', '118.88.128.0',\r\n           '118.89.0.0',\r\n           '118.91.240.0', '118.102.16.0', '118.112.0.0', '118.120.0.0', '118.124.0.0', '118.126.0.0',\r\n           '118.132.0.0',\r\n           '118.144.0.0', '118.178.0.0', '118.180.0.0', '118.184.0.0', '118.192.0.0', '118.212.0.0', '118.224.0.0',\r\n           '118.228.0.0', '118.230.0.0', '118.239.0.0', '118.242.0.0', '118.244.0.0', '118.248.0.0', '119.0.0.0',\r\n           '119.2.0.0',\r\n           '119.2.128.0', '119.3.0.0', '119.4.0.0', '119.8.0.0', '119.10.0.0', '119.15.136.0', '119.16.0.0',\r\n           '119.18.192.0',\r\n           '119.18.208.0', '119.18.224.0', '119.19.0.0', '119.20.0.0', '119.27.64.0', '119.27.160.0',\r\n           '119.27.192.0',\r\n           '119.28.0.0', '119.30.48.0', '119.31.192.0', '119.32.0.0', '119.40.0.0', '119.40.64.0', '119.40.128.0',\r\n           '119.41.0.0',\r\n           '119.42.0.0', '119.42.136.0', '119.42.224.0', '119.44.0.0', '119.48.0.0', '119.57.0.0', '119.58.0.0',\r\n           '119.59.128.0',\r\n           '119.60.0.0', '119.62.0.0', '119.63.32.0', '119.75.208.0', '119.78.0.0', '119.80.0.0', '119.84.0.0',\r\n           '119.88.0.0',\r\n           '119.96.0.0', '119.108.0.0', '119.112.0.0', '119.128.0.0', '119.144.0.0', '119.148.160.0',\r\n           '119.161.128.0',\r\n           '119.162.0.0', '119.164.0.0', '119.176.0.0', '119.232.0.0', '119.235.128.0', '119.248.0.0',\r\n           '119.253.0.0',\r\n           '119.254.0.0', '120.0.0.0', '120.24.0.0', '120.30.0.0', '120.32.0.0', '120.48.0.0', '120.52.0.0',\r\n           '120.64.0.0',\r\n           '120.72.32.0', '120.72.128.0', '120.76.0.0', '120.80.0.0', '120.90.0.0', '120.92.0.0', '120.94.0.0',\r\n           '120.128.0.0',\r\n           '120.136.128.0', '120.137.0.0', '120.192.0.0', '121.0.16.0', '121.4.0.0', '121.8.0.0', '121.16.0.0',\r\n           '121.32.0.0',\r\n           '121.40.0.0', '121.46.0.0', '121.48.0.0', '121.51.0.0', '121.52.160.0', '121.52.208.0', '121.52.224.0',\r\n           '121.55.0.0',\r\n           '121.56.0.0', '121.58.0.0', '121.58.144.0', '121.59.0.0', '121.60.0.0', '121.68.0.0', '121.76.0.0',\r\n           '121.79.128.0',\r\n           '121.89.0.0', '121.100.128.0', '121.101.208.0', '121.192.0.0', '121.201.0.0', '121.204.0.0',\r\n           '121.224.0.0',\r\n           '121.248.0.0', '121.255.0.0', '122.0.64.0', '122.0.128.0', '122.4.0.0', '122.8.0.0', '122.48.0.0',\r\n           '122.49.0.0',\r\n           '122.51.0.0', '122.64.0.0', '122.96.0.0', '122.102.0.0', '122.102.64.0', '122.112.0.0', '122.119.0.0',\r\n           '122.136.0.0',\r\n           '122.144.128.0', '122.152.192.0', '122.156.0.0', '122.192.0.0', '122.198.0.0', '122.200.64.0',\r\n           '122.204.0.0',\r\n           '122.224.0.0', '122.240.0.0', '122.248.48.0', '123.0.128.0', '123.4.0.0', '123.8.0.0', '123.49.128.0',\r\n           '123.52.0.0',\r\n           '123.56.0.0', '123.64.0.0', '123.96.0.0', '123.98.0.0', '123.99.128.0', '123.100.0.0', '123.101.0.0',\r\n           '123.103.0.0',\r\n           '123.108.128.0', '123.108.208.0', '123.112.0.0', '123.128.0.0', '123.136.80.0', '123.137.0.0',\r\n           '123.138.0.0',\r\n           '123.144.0.0', '123.160.0.0', '123.176.80.0', '123.177.0.0', '123.178.0.0', '123.180.0.0', '123.184.0.0',\r\n           '123.196.0.0', '123.199.128.0', '123.206.0.0', '123.232.0.0', '123.242.0.0', '123.244.0.0',\r\n           '123.249.0.0',\r\n           '123.253.0.0', '124.6.64.0', '124.14.0.0', '124.16.0.0', '124.20.0.0', '124.28.192.0', '124.29.0.0',\r\n           '124.31.0.0',\r\n           '124.40.112.0', '124.40.128.0', '124.42.0.0', '124.47.0.0', '124.64.0.0', '124.66.0.0', '124.67.0.0',\r\n           '124.68.0.0',\r\n           '124.72.0.0', '124.88.0.0', '124.108.8.0', '124.108.40.0', '124.112.0.0', '124.126.0.0', '124.128.0.0',\r\n           '124.147.128.0', '124.156.0.0', '124.160.0.0', '124.172.0.0', '124.192.0.0', '124.196.0.0',\r\n           '124.200.0.0',\r\n           '124.220.0.0', '124.224.0.0', '124.240.0.0', '124.240.128.0', '124.242.0.0', '124.243.192.0',\r\n           '124.248.0.0',\r\n           '124.249.0.0', '124.250.0.0', '124.254.0.0', '125.31.192.0', '125.32.0.0', '125.58.128.0',\r\n           '125.61.128.0',\r\n           '125.62.0.0', '125.64.0.0', '125.96.0.0', '125.98.0.0', '125.104.0.0', '125.112.0.0', '125.169.0.0',\r\n           '125.171.0.0',\r\n           '125.208.0.0', '125.210.0.0', '125.213.0.0', '125.214.96.0', '125.215.0.0', '125.216.0.0',\r\n           '125.254.128.0',\r\n           '134.196.0.0', '159.226.0.0', '161.207.0.0', '162.105.0.0', '166.111.0.0', '167.139.0.0', '168.160.0.0',\r\n           '169.211.1.0', '192.83.122.0', '192.83.169.0', '192.124.154.0', '192.188.170.0', '198.17.7.0',\r\n           '202.0.110.0',\r\n           '202.0.176.0', '202.4.128.0', '202.4.252.0', '202.8.128.0', '202.10.64.0', '202.14.88.0', '202.14.235.0',\r\n           '202.14.236.0', '202.14.238.0', '202.20.120.0', '202.22.248.0', '202.38.0.0', '202.38.64.0',\r\n           '202.38.128.0',\r\n           '202.38.136.0', '202.38.138.0', '202.38.140.0', '202.38.146.0', '202.38.149.0', '202.38.150.0',\r\n           '202.38.152.0',\r\n           '202.38.156.0', '202.38.158.0', '202.38.160.0', '202.38.164.0', '202.38.168.0', '202.38.176.0',\r\n           '202.38.184.0',\r\n           '202.38.192.0', '202.41.152.0', '202.41.240.0', '202.43.144.0', '202.46.32.0', '202.46.224.0',\r\n           '202.60.112.0',\r\n           '202.63.248.0', '202.69.4.0', '202.69.16.0', '202.70.0.0', '202.74.8.0', '202.75.208.0', '202.85.208.0',\r\n           '202.90.0.0', '202.90.224.0', '202.90.252.0', '202.91.0.0', '202.91.128.0', '202.91.176.0',\r\n           '202.91.224.0',\r\n           '202.92.0.0', '202.92.252.0', '202.93.0.0', '202.93.252.0', '202.95.0.0', '202.95.252.0', '202.96.0.0',\r\n           '202.112.0.0', '202.120.0.0', '202.122.0.0', '202.122.32.0', '202.122.64.0', '202.122.112.0',\r\n           '202.122.128.0',\r\n           '202.123.96.0', '202.124.24.0', '202.125.176.0', '202.127.0.0', '202.127.12.0', '202.127.16.0',\r\n           '202.127.40.0',\r\n           '202.127.48.0', '202.127.112.0', '202.127.128.0', '202.127.160.0', '202.127.192.0', '202.127.208.0',\r\n           '202.127.212.0',\r\n           '202.127.216.0', '202.127.224.0', '202.130.0.0', '202.130.224.0', '202.131.16.0', '202.131.48.0',\r\n           '202.131.208.0',\r\n           '202.136.48.0', '202.136.208.0', '202.136.224.0', '202.141.160.0', '202.142.16.0', '202.143.16.0',\r\n           '202.148.96.0',\r\n           '202.149.160.0', '202.149.224.0', '202.150.16.0', '202.152.176.0', '202.153.48.0', '202.158.160.0',\r\n           '202.160.176.0',\r\n           '202.164.0.0', '202.164.25.0', '202.165.96.0', '202.165.176.0', '202.165.208.0', '202.168.160.0',\r\n           '202.170.128.0',\r\n           '202.170.216.0', '202.173.8.0', '202.173.224.0', '202.179.240.0', '202.180.128.0', '202.181.112.0',\r\n           '202.189.80.0',\r\n           '202.192.0.0', '203.18.50.0', '203.79.0.0', '203.80.144.0', '203.81.16.0', '203.83.56.0', '203.86.0.0',\r\n           '203.86.64.0', '203.88.32.0', '203.88.192.0', '203.89.0.0', '203.90.0.0', '203.90.128.0', '203.90.192.0',\r\n           '203.91.32.0', '203.91.96.0', '203.91.120.0', '203.92.0.0', '203.92.160.0', '203.93.0.0', '203.94.0.0',\r\n           '203.95.0.0',\r\n           '203.95.96.0', '203.99.16.0', '203.99.80.0', '203.100.32.0', '203.100.80.0', '203.100.96.0',\r\n           '203.100.192.0',\r\n           '203.110.160.0', '203.118.192.0', '203.119.24.0', '203.119.32.0', '203.128.32.0', '203.128.96.0',\r\n           '203.130.32.0',\r\n           '203.132.32.0', '203.134.240.0', '203.135.96.0', '203.135.160.0', '203.142.219.0', '203.148.0.0',\r\n           '203.152.64.0',\r\n           '203.156.192.0', '203.158.16.0', '203.161.192.0', '203.166.160.0', '203.171.224.0', '203.174.7.0',\r\n           '203.174.96.0',\r\n           '203.175.128.0', '203.175.192.0', '203.176.168.0', '203.184.80.0', '203.187.160.0', '203.190.96.0',\r\n           '203.191.16.0',\r\n           '203.191.64.0', '203.191.144.0', '203.192.0.0', '203.196.0.0', '203.207.64.0', '203.207.128.0',\r\n           '203.208.0.0',\r\n           '203.208.16.0', '203.208.32.0', '203.209.224.0', '203.212.0.0', '203.212.80.0', '203.222.192.0',\r\n           '203.223.0.0',\r\n           '210.2.0.0', '210.5.0.0', '210.5.144.0', '210.12.0.0', '210.14.64.0', '210.14.112.0', '210.14.128.0',\r\n           '210.15.0.0',\r\n           '210.15.128.0', '210.16.128.0', '210.21.0.0', '210.22.0.0', '210.23.32.0', '210.25.0.0', '210.26.0.0',\r\n           '210.28.0.0',\r\n           '210.32.0.0', '210.51.0.0', '210.52.0.0', '210.56.192.0', '210.72.0.0', '210.76.0.0', '210.78.0.0',\r\n           '210.79.64.0',\r\n           '210.79.224.0', '210.82.0.0', '210.87.128.0', '210.185.192.0', '210.192.96.0', '211.64.0.0',\r\n           '211.80.0.0',\r\n           '211.96.0.0', '211.136.0.0', '211.144.0.0', '211.160.0.0', '218.0.0.0', '218.56.0.0', '218.64.0.0',\r\n           '218.96.0.0',\r\n           '218.104.0.0', '218.108.0.0', '218.185.192.0', '218.192.0.0', '218.240.0.0', '218.249.0.0', '219.72.0.0',\r\n           '219.82.0.0', '219.128.0.0', '219.216.0.0', '219.224.0.0', '219.242.0.0', '219.244.0.0', '220.101.192.0',\r\n           '220.112.0.0', '220.152.128.0', '220.154.0.0', '220.160.0.0', '220.192.0.0', '220.231.0.0',\r\n           '220.231.128.0',\r\n           '220.232.64.0', '220.234.0.0', '220.242.0.0', '220.248.0.0', '220.252.0.0', '221.0.0.0', '221.8.0.0',\r\n           '221.12.0.0',\r\n           '221.12.128.0', '221.13.0.0', '221.14.0.0', '221.122.0.0', '221.129.0.0', '221.130.0.0', '221.133.224.0',\r\n           '221.136.0.0', '221.172.0.0', '221.176.0.0', '221.192.0.0', '221.196.0.0', '221.198.0.0', '221.199.0.0',\r\n           '221.199.128.0', '221.199.192.0', '221.199.224.0', '221.200.0.0', '221.208.0.0', '221.224.0.0',\r\n           '222.16.0.0',\r\n           '222.32.0.0', '222.64.0.0', '222.125.0.0', '222.126.128.0', '222.128.0.0', '222.160.0.0', '222.168.0.0',\r\n           '222.176.0.0', '222.192.0.0', '222.240.0.0', '222.248.0.0']\r\n    rnd = random.randint(0, len(ips) - 1)\r\n    ip = ips[rnd]\r\n    _ip = ip.split('.')\r\n    for i, v in enumerate(_ip):\r\n        if int(v) == 0:\r\n            _ip[i] = str(random.randint(0, 255))\r\n    ip = '.'.join(_ip)\r\n    return ip\r\n\r\n\r\ndef open2():\r\n    global open2text\r\n    open2text = chooseFile()\r\n    task = threading.Thread(target=querys)\r\n    task.start()\r\n\r\n\r\ndef inputcar(code):\r\n    global codes\r\n    codes = code\r\n\r\n\r\ndef main__login(usercode, password, city):\r\n    task = threading.Thread(target=main__login__thread, args=(usercode, password, city))\r\n    task.start()\r\n\r\n\r\ndef open3():\r\n    global open3text, open4text\r\n    url = chooseFile2()\r\n    open4text = url\r\n    with open(url, 'r', encoding='utf-8') as f:\r\n        read_data = f.read().splitlines()\r\n        open3text = read_data\r\n\r\n\r\ndef open4():\r\n    global open5text\r\n    url = chooseFile2()\r\n    open5text = url\r\n\r\n\r\n# 定时间垂询远程参数\r\ndef run():  # 定义方法\r\n    global app, times, can\r\n    try:\r\n        html = requests.get(\"http://114.116.246.121/methods.php?method=c\")\r\n        can = html.text\r\n        if html.text != \"2107433662\":\r\n            app.exit()\r\n            sys.exit(app.exec())\r\n        html2 = requests.get(\"http://114.116.246.121/methods.php?method=d\")\r\n        if html2.text:\r\n            times = html2.text\r\n        else:\r\n            app.exit()\r\n            sys.exit(app.exec())\r\n        timer = threading.Timer(4, run)  # 每秒运行\r\n        timer.start()  # 执行方法\r\n    except:\r\n        app.exit()\r\n        sys.exit(app.exec())\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    global app, times, settings\r\n\r\n    settings = QSettings(\"config.ini\", QSettings.IniFormat)\r\n    t1 = threading.Timer(1, function=run)  # 创建定时器\r\n    t1.start()  # 开始执行线程\r\n    updateExe()\r\n\r\n    # 取参数\r\n    try:\r\n        html = requests.get(\"http://114.116.246.121/methods.php?method=c\")\r\n        if html.text != \"2107433662\":\r\n            sys.exit(-1)\r\n        html2 = requests.get(\"http://114.116.246.121/methods.php?method=d\")\r\n        if html2.text:\r\n            times = html2.text\r\n        else:\r\n            app.exit()\r\n            sys.exit(app.exec())\r\n    except:\r\n        app.exit()\r\n        sys.exit(app.exec())\r\n\r\n    app = QGuiApplication(sys.argv)\r\n    engine = QQmlApplicationEngine()\r\n    #    engine.addImportPath(\"qrc:/\")\r\n    # qml_file = Path(__file__).resolve().parent / \"main.qml\"\r\n    engine.load(\":/obj/main.qml\")\r\n    engine.load(\":/obj/Toast.qml\")\r\n    # 获取 root 对象.\r\n\r\n    window = engine.rootObjects()[0]\r\n    window.main__login.connect(main__login)\r\n    window.open1.connect(open1)\r\n    window.open2.connect(open2)\r\n    window.open3.connect(open3)\r\n    window.open4.connect(open4)\r\n    window.inputcar.connect(inputcar)\r\n    token__data = settings.value(\"loginData\")\r\n    # qml编辑器放开即可调试\r\n    # if os.path.isfile(\"rc_obj.py\"):\r\n    #     os.remove(\"rc_obj.py\")\r\n    if not engine.rootObjects():\r\n        sys.exit(-1)\r\n    sys.exit(app.exec())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/blackgo_gui/qt__source/main.py b/blackgo_gui/qt__source/main.py
--- a/blackgo_gui/qt__source/main.py	(revision 14d6f14e48c6367a39c0e7828144d329e7292098)
+++ b/blackgo_gui/qt__source/main.py	(date 1675309772822)
@@ -395,12 +395,12 @@
 
                             w = get_img_width(file)
                             h = get_img_height(file)
-                            blank_long_img = Image.new("RGB", (w, h * 3+hbj), (0, 0, 0))  # 空白大图
+                            blank_long_img = Image.new("RGB", (w + wbj, h * 3), (0, 0, 0))  # 空白大图
                             blank_long_img.save(os.path.join(root, thisa__jpg_))
 
                             # if thisc == thisb:
                             blank_long_img = Image.open(os.path.join(root, thisa__jpg_))
-                            img1 = Image.open(dcb[random.randint(0, len(dcb) - 1)]).resize((w, hbj), Image.ANTIALIAS)
+                            img1 = Image.open(dcb[random.randint(0, len(dcb) - 1)]).resize((wbj, hbj), Image.ANTIALIAS)
                             blank_long_img.paste(img1, (0, 0))
                             blank_long_img.save(os.path.join(root, os.path.join(root, thisa__jpg_)))
                             # else:
@@ -426,7 +426,7 @@
                             # else:
                             blank_long_img = Image.open(os.path.join(root, thisa__jpg_))
                             img2 = Image.open(file)
-                            blank_long_img.paste(img2, (0, hbj))
+                            blank_long_img.paste(img2, (wbj, 0))
                             blank_long_img.save(os.path.join(root, thisa__jpg_))
                             #
                             # blank_long_img2 = Image.open(os.path.join(root, thisa__jpg_2))
@@ -446,7 +446,7 @@
                             # else:
                             blank_long_img = Image.open(os.path.join(root, thisa__jpg_))
                             img3 = Image.open(file)
-                            blank_long_img.paste(img3, (0, hbj + h * 1))
+                            blank_long_img.paste(img3, (wbj, h * 1))
                             blank_long_img.save(os.path.join(root, thisa__jpg_))
                             # blank_long_img2 = Image.open(os.path.join(root, thisa__jpg_2))
                             # img32 = Image.open(file)
@@ -464,7 +464,7 @@
                             # else:
                             blank_long_img = Image.open(os.path.join(root, thisa__jpg_))
                             img4 = Image.open(file)
-                            blank_long_img.paste(img4, (0,  hbj + h * 2))
+                            blank_long_img.paste(img4, (wbj,  h * 2))
                             blank_long_img.save(os.path.join(root, thisa__jpg_))
                             # thisc = str(random.randint(1, 4))
                             #
